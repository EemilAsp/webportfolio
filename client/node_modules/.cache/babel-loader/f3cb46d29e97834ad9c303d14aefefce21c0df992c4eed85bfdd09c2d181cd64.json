{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtilities\";\nimport { Subject } from 'rxjs';\nimport { object } from \"prop-types\";\nexport default class ScrollService {\n  constructor() {\n    this.scrollToContactMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.isElementinView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementinView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementinView(screenFromDom, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCast.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCast = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","object","ScrollService","constructor","scrollToContactMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementinView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","keys","length","screen","screenFromDom","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCast","screenInView","addEventListener","scrollHandler"],"sources":["C:/Users/eemil/OneDrive/Tiedostot/LUT-yliopisto/Website portfolio/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtilities\";\r\nimport {Subject} from 'rxjs'\r\nimport { object } from \"prop-types\"\r\n\r\nexport default class ScrollService{\r\n    static scrollHandler = new ScrollService();\r\n\r\n    static currentScreenBroadCast = new Subject();\r\n    static currentScreenFadeIn = new Subject();\r\n\r\n    constructor(){\r\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\r\n    }\r\n    scrollToContactMe = ()=>{\r\n        let contactMeScreen = document.getElementById(\"ContactMe\")\r\n        if(!contactMeScreen) return;\r\n        contactMeScreen.scrollIntoView({behavior: \"smooth\"})\r\n    }\r\n    scrollToHome = ()=>{\r\n        let homeScreen = document.getElementById(\"Home\")\r\n        if(!homeScreen) return;\r\n        homeScreen.scrollIntoView({behavior: \"smooth\"})\r\n    }\r\n    isElementinView =(elem, type)=>{\r\n        let rec = elem.getBoundingClientRect();\r\n        let elementTop = rec.top;\r\n        let elementBottom = rec.Bottom;\r\n\r\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >=0;\r\n        let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\r\n\r\n        switch(type){\r\n            case \"partial\":\r\n                return partiallyVisible;\r\n\r\n            case \"complete\":\r\n                return completelyVisible\r\n                default:\r\n                    return false\r\n\r\n        }\r\n\r\n    }\r\n\r\n    checkCurrentScreenUnderViewport =(event)=>{\r\n        if(!event || object.keys(event).length <1)\r\n        return;\r\n        for(let screen of TOTAL_SCREENS){\r\n            let screenFromDom = document.getElementById(screen.screen_name);\r\n            if(!screenFromDom)\r\n            continue;\r\n\r\n\r\n            let fullyVisible = this.isElementinView(screenFromDom, \"complete\");\r\n            let partiallyVisible = this.isElementinView(screenFromDom, \"partial\");\r\n\r\n            if(fullyVisible || partiallyVisible){\r\n                if(partiallyVisible && !screen.alreadyRendered){\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    });\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if(fullyVisible){\r\n                    ScrollService.currentScreenBroadCast.next({\r\n                        screenInView: screen.screen_name,\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,mBAAmB;AACjD,SAAQC,OAAO,QAAO,MAAM;AAC5B,SAASC,MAAM,QAAQ,YAAY;AAEnC,eAAe,MAAMC,aAAa;EAM9BC,WAAW,GAAE;IAAA,KAGbC,iBAAiB,GAAG,MAAI;MACpB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;MAC1D,IAAG,CAACF,eAAe,EAAE;MACrBA,eAAe,CAACG,cAAc,CAAC;QAACC,QAAQ,EAAE;MAAQ,CAAC,CAAC;IACxD,CAAC;IAAA,KACDC,YAAY,GAAG,MAAI;MACf,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAG,CAACI,UAAU,EAAE;MAChBA,UAAU,CAACH,cAAc,CAAC;QAACC,QAAQ,EAAE;MAAQ,CAAC,CAAC;IACnD,CAAC;IAAA,KACDG,eAAe,GAAE,CAACC,IAAI,EAAEC,IAAI,KAAG;MAC3B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,EAAE;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAG,CAAC;MAC3E,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAE9E,QAAOT,IAAI;QACP,KAAK,SAAS;UACV,OAAOO,gBAAgB;QAE3B,KAAK,UAAU;UACX,OAAOG,iBAAiB;QACxB;UACI,OAAO,KAAK;MAAA;IAI5B,CAAC;IAAA,KAEDC,+BAA+B,GAAGC,KAAK,IAAG;MACtC,IAAG,CAACA,KAAK,IAAIzB,MAAM,CAAC0B,IAAI,CAACD,KAAK,CAAC,CAACE,MAAM,GAAE,CAAC,EACzC;MACA,KAAI,IAAIC,MAAM,IAAI9B,aAAa,EAAC;QAC5B,IAAI+B,aAAa,GAAGxB,QAAQ,CAACC,cAAc,CAACsB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAG,CAACD,aAAa,EACjB;QAGA,IAAIE,YAAY,GAAG,IAAI,CAACpB,eAAe,CAACkB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIT,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACkB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAGE,YAAY,IAAIX,gBAAgB,EAAC;UAChC,IAAGA,gBAAgB,IAAI,CAACQ,MAAM,CAACI,eAAe,EAAC;YAC3C/B,aAAa,CAACgC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YACzB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAGG,YAAY,EAAC;YACZ9B,aAAa,CAACmC,sBAAsB,CAACF,IAAI,CAAC;cACtCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;YACF;UACJ;QACJ;MACJ;IACJ,CAAC;IA7DGT,MAAM,CAACiB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACd,+BAA+B,CAAC;EAC3E;AA8DJ;AAtEqBvB,aAAa,CACvBsC,aAAa,GAAG,IAAItC,aAAa,EAAE;AADzBA,aAAa,CAGvBmC,sBAAsB,GAAG,IAAIrC,OAAO,EAAE;AAH5BE,aAAa,CAIvBgC,mBAAmB,GAAG,IAAIlC,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}